import cv2
import numpy as np


class Masker:
    """
    Acts as a wrapper around openCV methods to process and apply masks to images
    """
    def __init__(self, input_res: int, output_res: int):
        self.input_res = input_res
        self.output_res = output_res
        self.down_ratio = input_res // output_res
        if self.down_ratio != 1:
            self.downsample = True
        else:
            self.downsample = False
        # Mask generated by MaskRCNN tends to miss pixels near the edges
        self.dilation_kernel = np.ones((3, 3), np.uint8)

    def down_sample_mask(self, mask: np.ndarray):
        """
        For possible need to down-sample mask
        :return: downsampled version of mask
        """
        return mask[::self.down_ratio, ::self.down_ratio]

    def apply_mask(self, image: np.ndarray, mask: np.ndarray):
        """
        Apply a mask generated using MaskRCNN or otherwise to an input image
        for possibly performing better perception on simple models
        :param image: Original image of complex model, of dim input_res
        :param mask: Mask
        :return:
        """
        if self.downsample:
            mask = self.down_sample_mask(mask)
        masked = cv2.bitwise_and(image, image, mask=(mask * 255).astype(np.uint8))
        return masked

    def dilate_mask(self, mask: np.ndarray):
        """
        Dilating the mask a little bit when image is in high res and then downsampling to lower res
        isn likely to give good masks
        :param mask:
        :return: dilated_mask
        """
        dilated_mask = cv2.dilate(mask, self.dilation_kernel, iterations=1)
        return dilated_mask
